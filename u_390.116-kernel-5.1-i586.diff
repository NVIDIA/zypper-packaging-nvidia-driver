diff -u -r -p NVIDIA-Linux-x86_64-390.116.orig/kernel/common/inc/nv-list-helpers.h NVIDIA-Linux-x86_64-390.116/kernel/common/inc/nv-list-helpers.h
--- NVIDIA-Linux-x86_64-390.116.orig/kernel/common/inc/nv-list-helpers.h	2019-05-21 16:12:03.328480000 +0200
+++ NVIDIA-Linux-x86_64-390.116/kernel/common/inc/nv-list-helpers.h	2019-05-21 16:12:30.835993000 +0200
@@ -91,7 +91,7 @@
         list_entry((pos)->member.next, typeof(*(pos)), member)
 #endif
 
-static inline int list_is_first(const struct list_head *list,
+static inline int nv_list_is_first(const struct list_head *list,
                                 const struct list_head *head)
 {
     return list->prev == head;
diff -u -r -p NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-connector.c NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-connector.c
--- NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-connector.c	2019-05-21 16:12:06.114533000 +0200
+++ NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-connector.c	2019-05-21 16:12:30.691980000 +0200
@@ -201,6 +201,14 @@ nv_drm_connector_detect(struct drm_conne
     return __nv_drm_connector_detect_internal(connector);
 }
 
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+/* Add header constants missing after 5.1-rc1 */
+int drm_helper_probe_single_connector_modes(struct drm_connector
+*connector, uint32_t maxX,
+uint32_t maxY);
+#endif
+
 static struct drm_connector_funcs nv_connector_funcs = {
 #if defined NV_DRM_ATOMIC_HELPER_CONNECTOR_DPMS_PRESENT
     .dpms                   = drm_atomic_helper_connector_dpms,
diff -u -r -p NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-drv.c NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-drv.c
--- NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-drv.c	2019-05-21 16:12:05.911523000 +0200
+++ NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-drv.c	2019-05-21 16:12:30.746990000 +0200
@@ -35,6 +35,15 @@
 #include "nvidia-drm-gem-nvkms-memory.h"
 #include "nvidia-drm-gem-user-memory.h"
 
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+/* Add header constants missing after 5.1-rc1 */
+void drm_kms_helper_poll_init(struct drm_device *dev);
+void drm_kms_helper_poll_fini(struct drm_device *dev);
+bool drm_helper_hpd_irq_event(struct drm_device *dev);
+void drm_kms_helper_poll_disable(struct drm_device *dev);
+#endif
+
 #if defined(NV_DRM_AVAILABLE)
 
 #include "nvidia-drm-ioctl.h"
diff -u -r -p NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-encoder.c NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-encoder.c
--- NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-encoder.c	2019-05-21 16:12:06.135527000 +0200
+++ NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-encoder.c	2019-05-21 16:24:21.603700000 +0200
@@ -31,6 +31,12 @@
 #include "nvidia-drm-crtc.h"
 #include "nvidia-drm-helper.h"
 
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+/* Add header constants missing after 5.1-rc1 */
+void drm_kms_helper_hotplug_event(struct drm_device *dev);
+#endif
+
 #include <drm/drm_crtc_helper.h>
 
 #include <drm/drm_atomic.h>
@@ -152,6 +158,13 @@ nv_drm_encoder_new(struct drm_device *de
     return &nv_encoder->base;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+/* Add header constants missing after 5.1-rc1 */
+int drm_helper_probe_single_connector_modes(struct drm_connector
+*connector, uint32_t maxX,
+uint32_t maxY);
+#endif
+
 /*
  * Add encoder for given NvKmsKapiDisplay
  */
diff -u -r -p NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
--- NVIDIA-Linux-x86_64-390.116.orig/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c	2019-05-21 16:12:06.222528000 +0200
+++ NVIDIA-Linux-x86_64-390.116/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c	2019-05-21 16:18:29.029674000 +0200
@@ -268,7 +268,12 @@ static int __nv_drm_vma_fault(struct vm_
  */
 
 #if defined(NV_VM_OPS_FAULT_REMOVED_VMA_ARG)
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)
 static int nv_drm_vma_fault(struct vm_fault *vmf)
+#else
+static vm_fault_t nv_drm_vma_fault(struct vm_fault *vmf)
+#endif
 {
     return __nv_drm_vma_fault(vmf->vma, vmf);
 }
